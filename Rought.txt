10
4 1 2 3 4
[1,28,21]
[9,21,20]

____________________________________________

arr = list(map(int,input().strip().split()))

matrix = []
for i in range(row):
   col = list(map(int, input().split()))
   matrix.append(col)
print(matrix)

_____________________________________


1(2(7(8)))(3(4(6))(5))
[0,0,0,0,0,null,0,null,null,0,null,null,0,0,null,0,0,null,0,0]
[0,0,0,0,null,0,null,null,0,null,0]

[1691 ,6733 ,N ,5989 ,6640, N ,2750 ,3565, N, 1371 ,5003 ,N ,1677, 8921, N ,8413 ,7729 ,N ,7679 ,2475 ,N ,2822 ,6415, N ,3872]
[10,3,13,1,6,null,14,null,null,4,7,8]

[4 10 15 24 26]
[0 9 12 20]
[5 18 22 30]


suppose at current state i have 2 choices 
so i can choose from start , from end 
and i also monitor a total variable ==> sum of array at current state

now i can ask for my smaller recursive call (which would be b's turn) 
from total sum given to you(deducting the arr[i] or arr[j] at current recursive state) what is the maximum you are taking ?

therefore my recursive call becomes
start = arr[i] + total - arr[i] - dfs(i+1,j,total-arr[i])
end = arr[j] + total - arr[j] - dfs(i,j-1,total-arr[j])
return max(start,end)


base case would be i==j return arr[i]